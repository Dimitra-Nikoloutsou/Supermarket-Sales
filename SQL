SELECT * FROM supermarket;

--CHECK FOR NULLS
SELECT *
FROM supermarket
WHERE
invoice_id IS NULL OR 
branch IS NULL OR 
city IS NULL OR  
customer_type IS NULL OR 
gender IS NULL OR 
product_line IS NULL OR 
unit_price IS NULL OR  
quantity IS NULL OR  
tax_5 IS NULL OR 
total IS NULL OR 
date IS NULL OR  
time IS NULL OR 
payment IS NULL OR  
cogs IS NULL OR 
gross_margin_percentage IS NULL OR  
gross_income IS NULL OR 
rating IS NULL
;

--CHECK FOR DUPLICATES
WITH RowNumCTE AS (
SELECT *,
ROW_NUMBER() OVER (PARTITION BY invoice_id ORDER BY invoice_id) row_num
FROM supermarket
)

SELECT *
FROM RowNumCTE
WHERE row_num > 1

--Change Date and Time datatype from text
SELECT * FROM supermarket
ORDER BY date;

SELECT 
CONVERT(date, date, 101)
FROM supermarket
ORDER BY date;

UPDATE supermarket
SET date=CONVERT(date, date, 101);

SELECT 
CONVERT(time, time, 8)
FROM supermarket
ORDER BY date;

UPDATE supermarket
SET time=CONVERT(time, time, 8);

--**Mining the data**

SELECT * FROM supermarket;

SELECT count(*) FROM supermarket;

SELECT DISTINCT(product_line)
FROM supermarket;

SELECT DISTINCT(gender)
FROM supermarket;

SELECT DISTINCT(customer_type)
FROM supermarket;

SELECT DISTINCT(branch)
FROM supermarket;

SELECT DISTINCT(city)
FROM supermarket;

SELECT DISTINCT(payment)
FROM supermarket;

--Total Sales
SELECT sum(total)
FROM supermarket;

--Which gender spends most
SELECT 
gender,
ROUND((sum(total)),2) AS total_spent_per_gender
FROM supermarket
GROUP BY gender
ORDER BY total_spent_per_gender DESC;

--Customer type
SELECT
customer_type,
COUNT(*) AS no_of_customers
FROM supermarket
GROUP BY customer_type
ORDER BY no_of_customers DESC;

--Gender per customer type
SELECT
customer_type,
gender,
COUNT(*) AS no_of_customers
FROM supermarket
GROUP BY customer_type, gender
ORDER BY customer_type, no_of_customers DESC;

--Sales by customer type
SELECT 
customer_type,
ROUND((sum(total)),2) AS total_spent_per_gender
FROM supermarket
GROUP BY customer_type
ORDER BY total_spent_per_gender DESC;

--Sales by gender & customer_type
SELECT 
gender,
customer_type,
ROUND((sum(total)),2) AS total_spent_per_gender
FROM supermarket
GROUP BY gender, customer_type
ORDER BY total_spent_per_gender DESC;

--Which product line sells most
SELECT
product_line,
ROUND((sum(total)),2) AS total_spent_per_product_line
FROM supermarket
GROUP BY product_line
ORDER BY total_spent_per_product_line desc;

--Which product line is preferred by genders
WITH preferred AS (SELECT
product_line,
gender,
ROUND((SUM(total)),2) AS total_spent_per_product_line,
ROW_NUMBER() OVER(PARTITION BY product_line ORDER BY ROUND((SUM(total)),2) DESC) AS rn
FROM supermarket
GROUP BY product_line, gender)

SELECT
product_line,
gender,
total_spent_per_product_line
FROM preferred
WHERE rn=1
;

--Units sold per product line
SELECT
product_line,
SUM(quantity) AS total_units
FROM supermarket
GROUP BY product_line
ORDER BY total_units desc;

--Which day of week has the most sales
SELECT DATENAME(WEEKDAY, date)
FROM supermarket;

ALTER TABLE supermarket
ADD weekday varchar(50);

UPDATE supermarket
SET weekday=DATENAME(WEEKDAY, date);

SELECT *
FROM supermarket;

SELECT
weekday,
ROUND((AVG(total)),2) AS avg_sales,
ROUND((SUM(total)),2) AS total_sales
FROM supermarket
GROUP BY weekday
ORDER BY avg_sales desc, total_sales DESC;

--Most popular payment method
SELECT
DISTINCT(payment),
COUNT(*) as no_of_customers
FROM supermarket
GROUP BY payment
ORDER BY no_of_customers DESC;

--Best Rating branch
SELECT 
branch,
city,
ROUND((AVG(rating)),2) AS avg_rating
FROM supermarket
GROUP BY branch, city
ORDER BY avg_rating DESC;

--Branches growth rate across months
SELECT *
FROM supermarket
ORDER BY date;

SELECT
branch,
ROUND((SUM(gross_income)),2) AS total_gross
FROM supermarket
GROUP BY branch
ORDER BY total_gross DESC;

WITH cte AS (SELECT
branch,
MONTH(date) AS month,
ROUND((sum(gross_income)),2) AS total_gross
FROM supermarket
GROUP BY branch, month(date)
), cte1 AS (
SELECT
*,
LAG(total_gross) OVER(PARTITION BY branch ORDER BY branch, month) AS lag
FROM cte)

SELECT
*,
ROUND(((total_gross-lag)/lag*100),2) AS growth
FROM cte1
;










